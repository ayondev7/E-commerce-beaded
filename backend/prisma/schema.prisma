generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String   @id @default(uuid()) @db.Uuid
  categoryId       String   @db.Uuid
  category         Category @relation(fields: [categoryId], references: [id])
  productCollection String  @default("all")
  productName      String
  productDescription String
  productSlug      String
  price            Decimal  @db.Decimal(10,2)
  offerPrice       Decimal? @db.Decimal(10,2)
  images           String[]
  carts            Cart[]
  wishlists        Wishlist[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Customer {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  gender     Gender?
  dateOfBirth DateTime?
  phoneNumber String?
  email      String   @unique
  password   String?  
  providerId String?  
  image      String?  
  carts      Cart[]
  addresses  Address[]
  orders     Order[]
  wishlists  Wishlist[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  image     String
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id          String   @id @default(uuid()) @db.Uuid
  productId   String   @db.Uuid
  customerId  String   @db.Uuid
  quantity    Int      @default(1)
  subTotal    Decimal  @db.Decimal(10,2)
  deliveryFee Decimal  @db.Decimal(10,2)
  discount    Decimal  @db.Decimal(10,2)
  grandTotal  Decimal  @db.Decimal(10,2)
  product     Product  @relation(fields: [productId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Address {
  id          String    @id @default(uuid()) @db.Uuid
  customerId  String    @db.Uuid
  addressType String
  addressName String
  division    String
  district    String
  area        String
  zipCode     String
  fullAddress String
  isDefault   Boolean   @default(false)
  customer    Customer  @relation(fields: [customerId], references: [id])
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id          String   @id @default(uuid()) @db.Uuid
  customerId  String   @db.Uuid
  cartId      String   @db.Uuid
  addressId   String   @db.Uuid
  notes       String
  orderStatus String   @default("pending")
  customer    Customer @relation(fields: [customerId], references: [id])
  cart        Cart     @relation(fields: [cartId], references: [id])
  address     Address  @relation(fields: [addressId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Gender {
  male
  female
}

model Wishlist {
  id         String   @id @default(uuid()) @db.Uuid
  customerId String   @db.Uuid
  productId  String   @db.Uuid
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
